// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/div.proto

package div

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DivServiceClient is the client API for DivService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DivServiceClient interface {
	HandleDiv(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivReply, error)
}

type divServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDivServiceClient(cc grpc.ClientConnInterface) DivServiceClient {
	return &divServiceClient{cc}
}

func (c *divServiceClient) HandleDiv(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivReply, error) {
	out := new(DivReply)
	err := c.cc.Invoke(ctx, "/div.DivService/HandleDiv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DivServiceServer is the server API for DivService service.
// All implementations must embed UnimplementedDivServiceServer
// for forward compatibility
type DivServiceServer interface {
	HandleDiv(context.Context, *DivRequest) (*DivReply, error)
	mustEmbedUnimplementedDivServiceServer()
}

// UnimplementedDivServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDivServiceServer struct {
}

func (UnimplementedDivServiceServer) HandleDiv(context.Context, *DivRequest) (*DivReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDiv not implemented")
}
func (UnimplementedDivServiceServer) mustEmbedUnimplementedDivServiceServer() {}

// UnsafeDivServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DivServiceServer will
// result in compilation errors.
type UnsafeDivServiceServer interface {
	mustEmbedUnimplementedDivServiceServer()
}

func RegisterDivServiceServer(s grpc.ServiceRegistrar, srv DivServiceServer) {
	s.RegisterService(&DivService_ServiceDesc, srv)
}

func _DivService_HandleDiv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivServiceServer).HandleDiv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/div.DivService/HandleDiv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivServiceServer).HandleDiv(ctx, req.(*DivRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DivService_ServiceDesc is the grpc.ServiceDesc for DivService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DivService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "div.DivService",
	HandlerType: (*DivServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleDiv",
			Handler:    _DivService_HandleDiv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/div.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/mul.proto

package mul

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MulServiceClient is the client API for MulService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MulServiceClient interface {
	HandleMul(ctx context.Context, in *MulRequest, opts ...grpc.CallOption) (*MulReply, error)
}

type mulServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMulServiceClient(cc grpc.ClientConnInterface) MulServiceClient {
	return &mulServiceClient{cc}
}

func (c *mulServiceClient) HandleMul(ctx context.Context, in *MulRequest, opts ...grpc.CallOption) (*MulReply, error) {
	out := new(MulReply)
	err := c.cc.Invoke(ctx, "/mul.MulService/HandleMul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MulServiceServer is the server API for MulService service.
// All implementations must embed UnimplementedMulServiceServer
// for forward compatibility
type MulServiceServer interface {
	HandleMul(context.Context, *MulRequest) (*MulReply, error)
	mustEmbedUnimplementedMulServiceServer()
}

// UnimplementedMulServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMulServiceServer struct {
}

func (UnimplementedMulServiceServer) HandleMul(context.Context, *MulRequest) (*MulReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMul not implemented")
}
func (UnimplementedMulServiceServer) mustEmbedUnimplementedMulServiceServer() {}

// UnsafeMulServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MulServiceServer will
// result in compilation errors.
type UnsafeMulServiceServer interface {
	mustEmbedUnimplementedMulServiceServer()
}

func RegisterMulServiceServer(s grpc.ServiceRegistrar, srv MulServiceServer) {
	s.RegisterService(&MulService_ServiceDesc, srv)
}

func _MulService_HandleMul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulServiceServer).HandleMul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mul.MulService/HandleMul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulServiceServer).HandleMul(ctx, req.(*MulRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MulService_ServiceDesc is the grpc.ServiceDesc for MulService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MulService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mul.MulService",
	HandlerType: (*MulServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleMul",
			Handler:    _MulService_HandleMul_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mul.proto",
}
